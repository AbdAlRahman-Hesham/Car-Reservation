// <auto-generated />
using System;
using Car_Reservation.Repository.Contexts.CarRentContext.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Car_Reservation.Repository.Contexts.CarRentContext.Migrations
{
    [DbContext(typeof(CarRentDbContext))]
    [Migration("20250318021439_seeding")]
    partial class seeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Car_Reservation_Domain.Entities.CarEntity.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            name = "Toyota"
                        },
                        new
                        {
                            Id = 2,
                            name = "Ford"
                        },
                        new
                        {
                            Id = 3,
                            name = "BMW"
                        },
                        new
                        {
                            Id = 4,
                            name = "Mercedes-Benz"
                        },
                        new
                        {
                            Id = 5,
                            name = "Honda"
                        },
                        new
                        {
                            Id = 6,
                            name = "Chevrolet"
                        },
                        new
                        {
                            Id = 7,
                            name = "Nissan"
                        },
                        new
                        {
                            Id = 8,
                            name = "Hyundai"
                        },
                        new
                        {
                            Id = 9,
                            name = "Kia"
                        },
                        new
                        {
                            Id = 10,
                            name = "Volkswagen"
                        },
                        new
                        {
                            Id = 11,
                            name = "Subaru"
                        },
                        new
                        {
                            Id = 12,
                            name = "Mazda"
                        },
                        new
                        {
                            Id = 13,
                            name = "Lexus"
                        },
                        new
                        {
                            Id = 14,
                            name = "Dodge"
                        },
                        new
                        {
                            Id = 15,
                            name = "Jeep"
                        },
                        new
                        {
                            Id = 16,
                            name = "Tesla"
                        },
                        new
                        {
                            Id = 17,
                            name = "Volvo"
                        },
                        new
                        {
                            Id = 18,
                            name = "Porsche"
                        });
                });

            modelBuilder.Entity("Car_Reservation_Domain.Entities.CarEntity.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<decimal>("InsuranceCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("BrandId");

                    b.HasIndex("ModelId");

                    b.ToTable("cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 2,
                            InsuranceCost = 428m,
                            IsAvailable = true,
                            ModelId = 1,
                            Name = "Ford Mustang",
                            Price = 127m,
                            Rating = 4.7000000000000002,
                            Url = "https://th.bing.com/th/id/OIP.shICukY9MAFIZZ2fY8GCogHaEA?rs=1&pid=ImgDetMain"
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            InsuranceCost = 275m,
                            IsAvailable = true,
                            ModelId = 2,
                            Name = "Toyota Camry",
                            Price = 85m,
                            Rating = 4.5,
                            Url = "https://th.bing.com/th/id/R.ee3a8eb625b80e8a339ba413b6083356?rik=EqglPbjWgbUQWA&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 3,
                            InsuranceCost = 498m,
                            IsAvailable = true,
                            ModelId = 3,
                            Name = "BMW 3 Series",
                            Price = 146m,
                            Rating = 4.5999999999999996,
                            Url = "https://cdn.motor1.com/images/mgl/174Wp/s1/2019-bmw-3-series.jpg"
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 4,
                            InsuranceCost = 520m,
                            IsAvailable = true,
                            ModelId = 4,
                            Name = "Mercedes-Benz C-Class",
                            Price = 154m,
                            Rating = 4.7999999999999998,
                            Url = "https://th.bing.com/th/id/OIP.x0Rg9xavRsO8l2YJYZ2-gQHaEK?rs=1&pid=ImgDetMain"
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 5,
                            InsuranceCost = 254m,
                            IsAvailable = true,
                            ModelId = 5,
                            Name = "Honda Civic",
                            Price = 78m,
                            Rating = 4.4000000000000004,
                            Url = "https://th.bing.com/th/id/R.5716f82fcc49a849949faa979ec89993?rik=blR%2fh2NedLFhfA&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 6,
                            InsuranceCost = 625m,
                            IsAvailable = false,
                            ModelId = 6,
                            Name = "Chevrolet Corvette",
                            Price = 198m,
                            Rating = 4.9000000000000004,
                            Url = "https://th.bing.com/th/id/R.ae0112d018f6411a2bdd2d8f1836c365?rik=ob60KY04v5sRHQ&riu=http%3a%2f%2fwww.ausmotive.com%2fpics%2f2013%2fChevrolet-Corvette-Stingray-02.jpg&ehk=1m9%2fMf269WkLWAORDdRyY%2bcNI9xZJ1D9sTzqEzyL3Y0%3d&risl=&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 7,
                            InsuranceCost = 287m,
                            IsAvailable = true,
                            ModelId = 7,
                            Name = "Nissan Altima",
                            Price = 82m,
                            Rating = 4.0,
                            Url = "https://th.bing.com/th/id/R.ab06dccb5178c4ac5600833a47e5ccb9?rik=EyIkcPS33piZNw&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 8,
                            InsuranceCost = 265m,
                            IsAvailable = true,
                            ModelId = 8,
                            Name = "Hyundai Sonata",
                            Price = 76m,
                            Rating = 4.2000000000000002,
                            Url = "https://th.bing.com/th/id/R.a2ab007ce1b2485af4724930ab407b47?rik=y2UaMIaJAuLAzQ&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            Id = 9,
                            BrandId = 9,
                            InsuranceCost = 260m,
                            IsAvailable = true,
                            ModelId = 9,
                            Name = "Kia Optima",
                            Price = 75m,
                            Rating = 4.0999999999999996,
                            Url = "https://th.bing.com/th/id/R.557a504bc2e45044c335018d3ce9ad62?rik=37PqlpPKJl7Hkg&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            Id = 10,
                            BrandId = 10,
                            InsuranceCost = 290m,
                            IsAvailable = true,
                            ModelId = 10,
                            Name = "Volkswagen Golf",
                            Price = 87m,
                            Rating = 4.2999999999999998,
                            Url = "https://th.bing.com/th/id/R.07bb929fafa610a35127831042ea774e?rik=XMI7vJ0h5AZTUw&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            Id = 11,
                            BrandId = 11,
                            InsuranceCost = 310m,
                            IsAvailable = true,
                            ModelId = 11,
                            Name = "Subaru Outback",
                            Price = 93m,
                            Rating = 4.5999999999999996,
                            Url = "https://th.bing.com/th/id/R.b3cc66d690c6bed677061358dd20c804?rik=Xm7irkrDMOwOHw&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            Id = 12,
                            BrandId = 12,
                            InsuranceCost = 305m,
                            IsAvailable = true,
                            ModelId = 12,
                            Name = "Mazda CX-5",
                            Price = 92m,
                            Rating = 4.5,
                            Url = "https://th.bing.com/th/id/R.69334b92d94e652496b1d537a313a3f4?rik=hfxCetakvC%2fdyA&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            Id = 13,
                            BrandId = 13,
                            InsuranceCost = 425m,
                            IsAvailable = true,
                            ModelId = 13,
                            Name = "Lexus ES",
                            Price = 134m,
                            Rating = 4.7000000000000002,
                            Url = "https://th.bing.com/th/id/R.36978b49382491ae7db58ab0d036af5a?rik=VcnskkblDSQX%2fQ&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            Id = 14,
                            BrandId = 14,
                            InsuranceCost = 415m,
                            IsAvailable = true,
                            ModelId = 14,
                            Name = "Dodge Charger",
                            Price = 124m,
                            Rating = 4.4000000000000004,
                            Url = "https://www.motortrend.com/uploads/sites/5/2016/05/2016-Dodge-Charger-SRT-Hellcat-front-three-quarter-in-motion-10-e1463002496685.jpg"
                        },
                        new
                        {
                            Id = 15,
                            BrandId = 15,
                            InsuranceCost = 398m,
                            IsAvailable = true,
                            ModelId = 15,
                            Name = "Jeep Wrangler",
                            Price = 119m,
                            Rating = 4.5999999999999996,
                            Url = ""
                        },
                        new
                        {
                            Id = 16,
                            BrandId = 16,
                            InsuranceCost = 380m,
                            IsAvailable = true,
                            ModelId = 16,
                            Name = "Tesla Model 3",
                            Price = 129m,
                            Rating = 4.7999999999999998,
                            Url = "https://facts.net/wp-content/uploads/2023/12/15-jeep-wrangler-facts-1701628021.jpeg"
                        },
                        new
                        {
                            Id = 17,
                            BrandId = 17,
                            InsuranceCost = 510m,
                            IsAvailable = true,
                            ModelId = 17,
                            Name = "Volvo XC90",
                            Price = 152m,
                            Rating = 4.7000000000000002,
                            Url = "https://th.bing.com/th/id/OIP.4yE72-7g-iODnnSdz0ix_AHaE8?rs=1&pid=ImgDetMain"
                        },
                        new
                        {
                            Id = 18,
                            BrandId = 18,
                            InsuranceCost = 815m,
                            IsAvailable = false,
                            ModelId = 18,
                            Name = "Porsche 911",
                            Price = 320m,
                            Rating = 4.9000000000000004,
                            Url = "https://th.bing.com/th/id/OIP.V3nD0p-Bhf-TivgmJaYR0wHaEK?rs=1&pid=ImgDetMain"
                        },
                        new
                        {
                            Id = 19,
                            BrandId = 1,
                            InsuranceCost = 240m,
                            IsAvailable = true,
                            ModelId = 19,
                            Name = "Toyota Corolla",
                            Price = 68m,
                            Rating = 4.2999999999999998,
                            Url = "https://i.ytimg.com/vi/nMuGDd0bcog/maxresdefault.jpg"
                        },
                        new
                        {
                            Id = 20,
                            BrandId = 2,
                            InsuranceCost = 375m,
                            IsAvailable = true,
                            ModelId = 20,
                            Name = "Ford Explorer",
                            Price = 115m,
                            Rating = 4.2000000000000002,
                            Url = "https://th.bing.com/th/id/OIP.FvUR3d2kbE4N8Pde3udA-wHaEK?rs=1&pid=ImgDetMain"
                        },
                        new
                        {
                            Id = 21,
                            BrandId = 3,
                            InsuranceCost = 610m,
                            IsAvailable = true,
                            ModelId = 1,
                            Name = "BMW X5",
                            Price = 175m,
                            Rating = 4.7000000000000002,
                            Url = "https://media.autoexpress.co.uk/image/private/s--VfWlNFGx--/v1609948123/autoexpress/2021/01/New%20BMW%20X5%20M%20Competition%202021%20UK-16.jpg"
                        },
                        new
                        {
                            Id = 22,
                            BrandId = 4,
                            InsuranceCost = 580m,
                            IsAvailable = true,
                            ModelId = 2,
                            Name = "Mercedes-Benz GLC",
                            Price = 165m,
                            Rating = 4.5999999999999996,
                            Url = "https://cdn.motor1.com/images/mgl/Z2PX2/s1/mercedes-benz-glc-2019.jpg"
                        },
                        new
                        {
                            Id = 23,
                            BrandId = 5,
                            InsuranceCost = 270m,
                            IsAvailable = true,
                            ModelId = 3,
                            Name = "Honda Accord",
                            Price = 82m,
                            Rating = 4.5,
                            Url = "https://th.bing.com/th/id/OIP.vLa2-0XiaioyXd6XqY3Y9gHaE8?w=302&h=201&c=7&r=0&o=5&dpr=2.5&pid=1.7"
                        },
                        new
                        {
                            Id = 24,
                            BrandId = 6,
                            InsuranceCost = 480m,
                            IsAvailable = true,
                            ModelId = 4,
                            Name = "Chevrolet Camaro",
                            Price = 143m,
                            Rating = 4.5,
                            Url = "https://th.bing.com/th/id/OIP.I_mwW1qXjvCbHAWzSuUt_QHaEo?w=254&h=180&c=7&r=0&o=5&dpr=2.5&pid=1.7"
                        },
                        new
                        {
                            Id = 25,
                            BrandId = 7,
                            InsuranceCost = 320m,
                            IsAvailable = true,
                            ModelId = 5,
                            Name = "Nissan Maxima",
                            Price = 93m,
                            Rating = 4.2000000000000002,
                            Url = "https://th.bing.com/th/id/OIP.aYtcYYlbK1xY62VvCrf7dgHaFj?w=223&h=180&c=7&r=0&o=5&dpr=2.5&pid=1.7"
                        },
                        new
                        {
                            Id = 26,
                            BrandId = 8,
                            InsuranceCost = 270m,
                            IsAvailable = true,
                            ModelId = 6,
                            Name = "Hyundai Tucson",
                            Price = 82m,
                            Rating = 4.2999999999999998,
                            Url = "https://th.bing.com/th/id/OIP.zcXWOJgHE8edDLgtJHnQfgHaEK?w=319&h=180&c=7&r=0&o=5&dpr=2.5&pid=1.7"
                        },
                        new
                        {
                            Id = 27,
                            BrandId = 9,
                            InsuranceCost = 265m,
                            IsAvailable = true,
                            ModelId = 7,
                            Name = "Kia Sportage",
                            Price = 80m,
                            Rating = 4.2000000000000002,
                            Url = "https://th.bing.com/th/id/OIP.H0qqCl2_b0BRTzsnEtO2pgHaE7?w=236&h=180&c=7&r=0&o=5&dpr=2.5&pid=1.7"
                        },
                        new
                        {
                            Id = 28,
                            BrandId = 11,
                            InsuranceCost = 300m,
                            IsAvailable = true,
                            ModelId = 9,
                            Name = "Subaru Forester",
                            Price = 90m,
                            Rating = 4.5,
                            Url = "https://th.bing.com/th/id/OIP.T3RIbguC2smX2ORvr-ooYgAAAA?w=317&h=180&c=7&r=0&o=5&dpr=2.5&pid=1.7"
                        },
                        new
                        {
                            Id = 29,
                            BrandId = 13,
                            InsuranceCost = 455m,
                            IsAvailable = true,
                            ModelId = 11,
                            Name = "Lexus RX",
                            Price = 142m,
                            Rating = 4.7000000000000002,
                            Url = "https://th.bing.com/th/id/OIP.oxWUD74TkCzaq-UR_1ImWgHaE8?w=284&h=189&c=7&r=0&o=5&dpr=2.5&pid=1.7"
                        },
                        new
                        {
                            Id = 30,
                            BrandId = 14,
                            InsuranceCost = 430m,
                            IsAvailable = true,
                            ModelId = 12,
                            Name = "Dodge Challenger",
                            Price = 128m,
                            Rating = 4.5,
                            Url = "https://th.bing.com/th/id/OIP.XuTj_zjpeMBtD-PBP0XVUAHaE8?rs=1&pid=ImgDetMain"
                        },
                        new
                        {
                            Id = 31,
                            BrandId = 15,
                            InsuranceCost = 410m,
                            IsAvailable = true,
                            ModelId = 13,
                            Name = "Jeep Grand Cherokee",
                            Price = 125m,
                            Rating = 4.4000000000000004,
                            Url = "https://th.bing.com/th/id/OIP.DxWQK5PuVQx0n5RHxwoN4gHaE8?rs=1&pid=ImgDetMain"
                        });
                });

            modelBuilder.Entity("Car_Reservation_Domain.Entities.CarEntity.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Models");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            Name = "Corolla",
                            category = "Economic"
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            Name = "Camry",
                            category = "Medium"
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 2,
                            Name = "Mustang",
                            category = "Economic"
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 2,
                            Name = "Explorer",
                            category = "Luxury"
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 3,
                            Name = "1 Series",
                            category = "Economic"
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 3,
                            Name = "3 Series",
                            category = "Medium"
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 3,
                            Name = "X5",
                            category = "Luxury"
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 4,
                            Name = "C-Class",
                            category = "Medium"
                        },
                        new
                        {
                            Id = 9,
                            BrandId = 4,
                            Name = "GLC",
                            category = "Medium"
                        },
                        new
                        {
                            Id = 10,
                            BrandId = 5,
                            Name = "Civic",
                            category = "Economic"
                        },
                        new
                        {
                            Id = 11,
                            BrandId = 5,
                            Name = "Accord",
                            category = "Medium"
                        },
                        new
                        {
                            Id = 12,
                            BrandId = 6,
                            Name = "Corvette",
                            category = "Medium"
                        },
                        new
                        {
                            Id = 13,
                            BrandId = 6,
                            Name = "Camaro",
                            category = "Medium"
                        },
                        new
                        {
                            Id = 14,
                            BrandId = 7,
                            Name = "Altima",
                            category = "Medium"
                        },
                        new
                        {
                            Id = 15,
                            BrandId = 7,
                            Name = "Maxima",
                            category = "Medium"
                        },
                        new
                        {
                            Id = 16,
                            BrandId = 8,
                            Name = "Sonata",
                            category = "Medium"
                        },
                        new
                        {
                            Id = 17,
                            BrandId = 8,
                            Name = "Tucson",
                            category = "Medium"
                        },
                        new
                        {
                            Id = 18,
                            BrandId = 9,
                            Name = "Optima",
                            category = "Medium"
                        },
                        new
                        {
                            Id = 19,
                            BrandId = 9,
                            Name = "Luxuryage",
                            category = "Medium"
                        },
                        new
                        {
                            Id = 20,
                            BrandId = 10,
                            Name = "Golf",
                            category = "Economic"
                        },
                        new
                        {
                            Id = 21,
                            BrandId = 10,
                            Name = "Tiguan",
                            category = "Medium"
                        },
                        new
                        {
                            Id = 22,
                            BrandId = 11,
                            Name = "Outback",
                            category = "Medium"
                        },
                        new
                        {
                            Id = 23,
                            BrandId = 11,
                            Name = "Forester",
                            category = "Medium"
                        },
                        new
                        {
                            Id = 24,
                            BrandId = 12,
                            Name = "CX-5",
                            category = "Medium"
                        },
                        new
                        {
                            Id = 25,
                            BrandId = 12,
                            Name = "MX-5 Miata",
                            category = "Luxury"
                        },
                        new
                        {
                            Id = 26,
                            BrandId = 13,
                            Name = "ES",
                            category = "Luxury"
                        },
                        new
                        {
                            Id = 27,
                            BrandId = 13,
                            Name = "RX",
                            category = "Luxury"
                        },
                        new
                        {
                            Id = 28,
                            BrandId = 14,
                            Name = "Charger",
                            category = "Luxury"
                        },
                        new
                        {
                            Id = 29,
                            BrandId = 14,
                            Name = "Challenger",
                            category = "Luxury"
                        },
                        new
                        {
                            Id = 30,
                            BrandId = 15,
                            Name = "Wrangler",
                            category = "Medium"
                        },
                        new
                        {
                            Id = 31,
                            BrandId = 15,
                            Name = "Grand Cherokee",
                            category = "Medium"
                        },
                        new
                        {
                            Id = 32,
                            BrandId = 16,
                            Name = "Model 3",
                            category = "Economic"
                        },
                        new
                        {
                            Id = 33,
                            BrandId = 17,
                            Name = "XC90",
                            category = "Luxury"
                        },
                        new
                        {
                            Id = 34,
                            BrandId = 18,
                            Name = "911",
                            category = "Luxury"
                        });
                });

            modelBuilder.Entity("Car_Reservation_Domain.Entities.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PicUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Car_Reservation_Domain.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestedBrand")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("RequestedModel")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Car_Reservation_Domain.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Car_Reservation_Domain.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RequestUser", b =>
                {
                    b.Property<int>("RequestsId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RequestsId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("RequestUser");
                });

            modelBuilder.Entity("Car_Reservation_Domain.Entities.CarEntity.Car", b =>
                {
                    b.HasOne("Car_Reservation_Domain.Entities.Identity.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId");

                    b.HasOne("Car_Reservation_Domain.Entities.CarEntity.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Car_Reservation_Domain.Entities.CarEntity.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Brand");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Car_Reservation_Domain.Entities.CarEntity.Model", b =>
                {
                    b.HasOne("Car_Reservation_Domain.Entities.CarEntity.Brand", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Car_Reservation_Domain.Entities.Identity.User", b =>
                {
                    b.OwnsOne("Car_Reservation_Domain.Entities.Identity.UserAddress", "Address", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId");

                            b1.ToTable("AspNetUsers");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("Car_Reservation_Domain.Entities.Reservation", b =>
                {
                    b.HasOne("Car_Reservation_Domain.Entities.CarEntity.Car", "car")
                        .WithMany("Reservations")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Car_Reservation_Domain.Entities.Identity.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("car");
                });

            modelBuilder.Entity("Car_Reservation_Domain.Entities.Review", b =>
                {
                    b.HasOne("Car_Reservation_Domain.Entities.CarEntity.Car", "Car")
                        .WithMany("Reviews")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Car_Reservation_Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Car_Reservation_Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Car_Reservation_Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Car_Reservation_Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Car_Reservation_Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RequestUser", b =>
                {
                    b.HasOne("Car_Reservation_Domain.Entities.Request", null)
                        .WithMany()
                        .HasForeignKey("RequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Car_Reservation_Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Car_Reservation_Domain.Entities.CarEntity.Brand", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("Car_Reservation_Domain.Entities.CarEntity.Car", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Car_Reservation_Domain.Entities.Identity.User", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
