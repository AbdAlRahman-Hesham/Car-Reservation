// <auto-generated />
using System;
using Car_Reservation.Repository.Contexts.CarRentContext.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Car_Reservation.Repository.Contexts.CarRentContext.Migrations
{
    [DbContext(typeof(CarRentDbContext))]
    partial class CarRentContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Car_Reservation_Domain.Entities.CarEntity.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Brands", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LogoUrl = "https://www.freepnglogos.com/uploads/toyota-logo-png/toyota-logos-brands-10.png",
                            Name = "Toyota"
                        },
                        new
                        {
                            Id = 2,
                            LogoUrl = "https://example.com/ford-logo.png",
                            Name = "Ford"
                        },
                        new
                        {
                            Id = 3,
                            LogoUrl = "https://clipground.com/images/bmw-logo-png-5.png",
                            Name = "BMW"
                        },
                        new
                        {
                            Id = 4,
                            LogoUrl = "https://example.com/mercedes-logo.png",
                            Name = "Mercedes-Benz"
                        },
                        new
                        {
                            Id = 5,
                            LogoUrl = "https://example.com/honda-logo.png",
                            Name = "Honda"
                        },
                        new
                        {
                            Id = 6,
                            LogoUrl = "https://example.com/chevrolet-logo.png",
                            Name = "Chevrolet"
                        },
                        new
                        {
                            Id = 7,
                            LogoUrl = "https://example.com/nissan-logo.png",
                            Name = "Nissan"
                        },
                        new
                        {
                            Id = 9,
                            LogoUrl = "https://example.com/kia-logo.png",
                            Name = "Kia"
                        },
                        new
                        {
                            Id = 10,
                            LogoUrl = "https://example.com/vw-logo.png",
                            Name = "Volkswagen"
                        },
                        new
                        {
                            Id = 12,
                            LogoUrl = "https://example.com/mazda-logo.png",
                            Name = "Mazda"
                        },
                        new
                        {
                            Id = 14,
                            LogoUrl = "https://example.com/dodge-logo.png",
                            Name = "Dodge"
                        },
                        new
                        {
                            Id = 15,
                            LogoUrl = "https://example.com/jeep-logo.png",
                            Name = "Jeep"
                        },
                        new
                        {
                            Id = 16,
                            LogoUrl = "https://example.com/tesla-logo.png",
                            Name = "Tesla"
                        },
                        new
                        {
                            Id = 17,
                            LogoUrl = "https://example.com/volvo-logo.png",
                            Name = "Volvo"
                        },
                        new
                        {
                            Id = 18,
                            LogoUrl = "https://example.com/porsche-logo.png",
                            Name = "Porsche"
                        });
                });

            modelBuilder.Entity("Car_Reservation_Domain.Entities.CarEntity.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<decimal>("InsuranceCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("BrandId");

                    b.HasIndex("ModelId");

                    b.ToTable("cars", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            InsuranceCost = 45m,
                            IsAvailable = true,
                            ModelId = 1,
                            Price = 204m,
                            Rating = 10.0,
                            Url = "https://th.bing.com/th/id/R.13f35ec1a9de5ebd2fd4b827926d04b8?rik=9xLRDfW3CxDFnw&riu=http%3a%2f%2fgearopen.com%2fwp-content%2fuploads%2f2017%2f05%2f2017-Toyota-Corolla-ECO-front-three-quarter-02.jpg&ehk=tNdDzMCg49iswwtJYRuotsUbq4Rk99YTBhcgZQVDdqI%3d&risl=&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            InsuranceCost = 30m,
                            IsAvailable = false,
                            ModelId = 1,
                            Price = 204m,
                            Rating = 6.0,
                            Url = "https://tflcar.com/wp-content/uploads/2017/01/2017_Toyota_Corolla_XSE_011.jpg"
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 1,
                            InsuranceCost = 15m,
                            IsAvailable = true,
                            ModelId = 1,
                            Price = 204m,
                            Rating = 9.0,
                            Url = "https://th.bing.com/th/id/R.ed40f0cebe8894cda6622bde80849c45?rik=4MrwAAPGryKcVA&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 1,
                            InsuranceCost = 452m,
                            IsAvailable = false,
                            ModelId = 2,
                            Price = 2331m,
                            Rating = 10.0,
                            Url = "https://th.bing.com/th/id/OIP.fRodtYEvhYFeUYjEyLdbkwHaEK?rs=1&pid=ImgDetMain"
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 1,
                            InsuranceCost = 4655m,
                            IsAvailable = true,
                            ModelId = 2,
                            Price = 2014m,
                            Rating = 8.0,
                            Url = "https://www.toyota.co.uk/content/dam/toyota/nmsc/united-kingdom/new-cars/prius/toyota-prius-2019-gallery-01-full_tcm-3060-1574518.jpeg"
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 1,
                            InsuranceCost = 45m,
                            IsAvailable = true,
                            ModelId = 3,
                            Price = 204m,
                            Rating = 10.0,
                            Url = "https://th.bing.com/th/id/R.ee3a8eb625b80e8a339ba413b6083356?rik=EqglPbjWgbUQWA&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 1,
                            InsuranceCost = 45m,
                            IsAvailable = false,
                            ModelId = 3,
                            Price = 204m,
                            Rating = 10.0,
                            Url = "https://th.bing.com/th/id/OIP.E3MaJERK-OEtNx6z2KkunwHaEK?rs=1&pid=ImgDetMain"
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 1,
                            InsuranceCost = 45m,
                            IsAvailable = true,
                            ModelId = 4,
                            Price = 204m,
                            Rating = 10.0,
                            Url = "https://th.bing.com/th/id/R.0a2c890e770cfa0df8354a4853cd4b4a?rik=XMDCzxaF%2fXizjQ&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            Id = 9,
                            BrandId = 1,
                            InsuranceCost = 45m,
                            IsAvailable = true,
                            ModelId = 4,
                            Price = 204m,
                            Rating = 10.0,
                            Url = "https://th.bing.com/th/id/OIP.kYvy0ttipDK8a6PQJYUhhgHaE7?rs=1&pid=ImgDetMain"
                        },
                        new
                        {
                            Id = 10,
                            BrandId = 1,
                            InsuranceCost = 45m,
                            IsAvailable = true,
                            ModelId = 5,
                            Price = 204m,
                            Rating = 10.0,
                            Url = "https://th.bing.com/th/id/R.a37fd279d6372b67a13c85b52bd19166?rik=Xvmvfx%2b3P%2fPA0A&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            Id = 11,
                            BrandId = 1,
                            InsuranceCost = 45m,
                            IsAvailable = true,
                            ModelId = 5,
                            Price = 204m,
                            Rating = 10.0,
                            Url = "https://th.bing.com/th/id/R.ee5d18c40530d04c09d70d8261721609?rik=r6UfeNiSuoIpmg&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            Id = 12,
                            BrandId = 2,
                            InsuranceCost = 80m,
                            IsAvailable = true,
                            ModelId = 6,
                            Price = 350m,
                            Rating = 9.0,
                            Url = "https://th.bing.com/th/id/R.b246f3a72eea4183d7047e12f2181f73?rik=iFZHeTuQfsrS2g&riu=http%3a%2f%2fwww.hdcarwallpapers.com%2fwalls%2f2018_ford_mustang_gt_fastback_4k_7-HD.jpg&ehk=INXMe19kIlj9qaMGtbE%2fshvhc6be5G0YX3UAXyv3l9U%3d&risl=1&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            Id = 13,
                            BrandId = 2,
                            InsuranceCost = 85m,
                            IsAvailable = true,
                            ModelId = 6,
                            Price = 370m,
                            Rating = 8.0,
                            Url = "https://th.bing.com/th/id/OIP.3m-31b1JnQqO_752cT7-IgHaE7?rs=1&pid=ImgDetMain"
                        },
                        new
                        {
                            Id = 14,
                            BrandId = 2,
                            InsuranceCost = 60m,
                            IsAvailable = true,
                            ModelId = 7,
                            Price = 290m,
                            Rating = 9.0,
                            Url = "https://th.bing.com/th/id/R.41cac357f0f3b9910bfca1194afe668d?rik=xfS3n0r8Ad8dkA&riu=http%3a%2f%2fdigestcars.com%2fwp-content%2fuploads%2f2019%2f04%2f5-things-you-will-want-to-know-about-the-new-Ford-F-150_1.jpg&ehk=AGMnbpDJAyyrMsE8pMau4s3kFkGASpQCI9hWKTsIxIA%3d&risl=&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            Id = 15,
                            BrandId = 2,
                            InsuranceCost = 65m,
                            IsAvailable = false,
                            ModelId = 7,
                            Price = 310m,
                            Rating = 8.0,
                            Url = "https://th.bing.com/th/id/R.c4570840f31e7a1731688238aa3107df?rik=XO%2brd6VoNyZitQ&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            Id = 16,
                            BrandId = 2,
                            InsuranceCost = 35m,
                            IsAvailable = true,
                            ModelId = 8,
                            Price = 180m,
                            Rating = 7.0,
                            Url = "https://th.bing.com/th/id/R.358541b7b0f49aa69ee4085ba8989327?rik=tslujerDsasWWw&riu=http%3a%2f%2fimages.thecarconnection.com%2fhug%2f2016-ford-focus_100530025_h.jpg&ehk=ChZtG23kaWOgono5xgRkJCoTkNgjshTk8Pbz4IDRfgQ%3d&risl=&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            Id = 17,
                            BrandId = 3,
                            InsuranceCost = 95m,
                            IsAvailable = true,
                            ModelId = 9,
                            Price = 420m,
                            Rating = 9.0,
                            Url = "https://th.bing.com/th/id/OIP.i0ABaiuechbUYG190jsKqQHaE7?rs=1&pid=ImgDetMain"
                        },
                        new
                        {
                            Id = 18,
                            BrandId = 3,
                            InsuranceCost = 100m,
                            IsAvailable = true,
                            ModelId = 9,
                            Price = 450m,
                            Rating = 10.0,
                            Url = "https://images.summitmedia-digital.com/topgear/images/articleImages/news/0_2011/10/17/bmw_3_series_sedan/bmw-3-series-a.jpg"
                        },
                        new
                        {
                            Id = 19,
                            BrandId = 3,
                            InsuranceCost = 120m,
                            IsAvailable = true,
                            ModelId = 10,
                            Price = 580m,
                            Rating = 9.0,
                            Url = "https://th.bing.com/th/id/R.d96401ca0b33346d175c7c638144d93f?rik=UYTq0ZTpLRH5VQ&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            Id = 20,
                            BrandId = 4,
                            InsuranceCost = 110m,
                            IsAvailable = true,
                            ModelId = 11,
                            Price = 450m,
                            Rating = 9.0,
                            Url = "https://th.bing.com/th/id/OIP.A6HcLwAoEjbGrisbJia0uwHaEK?rs=1&pid=ImgDetMain"
                        },
                        new
                        {
                            Id = 21,
                            BrandId = 4,
                            InsuranceCost = 135m,
                            IsAvailable = true,
                            ModelId = 12,
                            Price = 600m,
                            Rating = 10.0,
                            Url = "https://th.bing.com/th/id/R.915151607b5ceb6119d4658c7225c19a?rik=2UrhhsIfX7gxVw&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            Id = 22,
                            BrandId = 5,
                            InsuranceCost = 40m,
                            IsAvailable = false,
                            ModelId = 13,
                            Price = 210m,
                            Rating = 8.0,
                            Url = "https://th.bing.com/th/id/OIP.FPAsfXVKluXh6NuPYRbtMgHaDX?rs=1&pid=ImgDetMain"
                        },
                        new
                        {
                            Id = 23,
                            BrandId = 5,
                            InsuranceCost = 55m,
                            IsAvailable = true,
                            ModelId = 14,
                            Price = 280m,
                            Rating = 8.0,
                            Url = "https://th.bing.com/th/id/OIP.hDjz51LBg8zIQgpmUMP3wAHaE7?rs=1&pid=ImgDetMain"
                        },
                        new
                        {
                            Id = 24,
                            BrandId = 6,
                            InsuranceCost = 75m,
                            IsAvailable = true,
                            ModelId = 15,
                            Price = 320m,
                            Rating = 8.0,
                            Url = "https://th.bing.com/th/id/R.cbc9ad72b6b9148bcdbb032d19dff21a?rik=qrKNmspaO8Jh4g&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            Id = 25,
                            BrandId = 6,
                            InsuranceCost = 60m,
                            IsAvailable = true,
                            ModelId = 16,
                            Price = 300m,
                            Rating = 7.0,
                            Url = "https://th.bing.com/th/id/OIP.geMmf5pPWtha02X6kCBkHQHaEA?rs=1&pid=ImgDetMain"
                        },
                        new
                        {
                            Id = 26,
                            BrandId = 7,
                            InsuranceCost = 45m,
                            IsAvailable = true,
                            ModelId = 17,
                            Price = 220m,
                            Rating = 7.0,
                            Url = "https://th.bing.com/th/id/R.ab06dccb5178c4ac5600833a47e5ccb9?rik=EyIkcPS33piZNw&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            Id = 27,
                            BrandId = 7,
                            InsuranceCost = 50m,
                            IsAvailable = true,
                            ModelId = 18,
                            Price = 250m,
                            Rating = 7.0,
                            Url = "https://th.bing.com/th/id/R.6c1bda765af52a567342e023cf936ad3?rik=%2fHVwWJhsq72OXw&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            Id = 28,
                            BrandId = 9,
                            InsuranceCost = 35m,
                            IsAvailable = false,
                            ModelId = 19,
                            Price = 190m,
                            Rating = 7.0,
                            Url = "https://th.bing.com/th/id/R.c97e35804a46f538248d343db1a9f5ff?rik=%2fzFLn4gjLGjSbw&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            Id = 29,
                            BrandId = 9,
                            InsuranceCost = 55m,
                            IsAvailable = true,
                            ModelId = 20,
                            Price = 270m,
                            Rating = 8.0,
                            Url = "https://th.bing.com/th/id/OIP.Juc1DEMbs-wPz1VKev4SoQHaE8?rs=1&pid=ImgDetMain"
                        },
                        new
                        {
                            Id = 30,
                            BrandId = 10,
                            InsuranceCost = 45m,
                            IsAvailable = true,
                            ModelId = 21,
                            Price = 220m,
                            Rating = 8.0,
                            Url = "https://th.bing.com/th/id/R.82a8d6336399fabe92e4fcd4d5950897?rik=%2bdZJp5hhFZlvNg&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            Id = 31,
                            BrandId = 10,
                            InsuranceCost = 50m,
                            IsAvailable = true,
                            ModelId = 22,
                            Price = 260m,
                            Rating = 7.0,
                            Url = "https://th.bing.com/th/id/OIP.StiwyTxmAZdWVAVEnjmZ-wHaEK?rs=1&pid=ImgDetMain"
                        },
                        new
                        {
                            Id = 32,
                            BrandId = 12,
                            InsuranceCost = 40m,
                            IsAvailable = true,
                            ModelId = 23,
                            Price = 210m,
                            Rating = 8.0,
                            Url = "https://th.bing.com/th/id/R.7de3f188f629a170ec395b21d41f1685?rik=jk78fBKU9354Pw&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            Id = 33,
                            BrandId = 12,
                            InsuranceCost = 50m,
                            IsAvailable = false,
                            ModelId = 24,
                            Price = 250m,
                            Rating = 8.0,
                            Url = "https://th.bing.com/th/id/R.db85daf9a08f811d1c05ef1c8bd0ffb0?rik=HxrFZqCkIghLSQ&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            Id = 34,
                            BrandId = 14,
                            InsuranceCost = 80m,
                            IsAvailable = true,
                            ModelId = 25,
                            Price = 340m,
                            Rating = 8.0,
                            Url = "https://th.bing.com/th/id/R.62b12f4444f0676498fc8ebb46542282?rik=3gFYyFdVD%2bbFrg&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            Id = 35,
                            BrandId = 14,
                            InsuranceCost = 60m,
                            IsAvailable = true,
                            ModelId = 26,
                            Price = 300m,
                            Rating = 7.0,
                            Url = "https://th.bing.com/th/id/OIP.yKvLUhlM9mWH4yP4BbCJbgHaE8?rs=1&pid=ImgDetMain"
                        },
                        new
                        {
                            Id = 36,
                            BrandId = 15,
                            InsuranceCost = 70m,
                            IsAvailable = false,
                            ModelId = 27,
                            Price = 320m,
                            Rating = 9.0,
                            Url = "https://th.bing.com/th/id/OIP.AlD6RqrzPq5FnaovJgKXgQHaEK?rs=1&pid=ImgDetMain"
                        },
                        new
                        {
                            Id = 37,
                            BrandId = 15,
                            InsuranceCost = 75m,
                            IsAvailable = true,
                            ModelId = 28,
                            Price = 350m,
                            Rating = 8.0,
                            Url = "https://th.bing.com/th/id/R.7154ebc03e4cc069002b398a41e3b9f1?rik=AdsX6WsfZshMhQ&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            Id = 38,
                            BrandId = 16,
                            InsuranceCost = 85m,
                            IsAvailable = true,
                            ModelId = 29,
                            Price = 380m,
                            Rating = 9.0,
                            Url = "https://th.bing.com/th/id/OIP.xfhn3wN5Q1L3no4LmUPTxQHaD4?rs=1&pid=ImgDetMain"
                        },
                        new
                        {
                            Id = 39,
                            BrandId = 16,
                            InsuranceCost = 90m,
                            IsAvailable = true,
                            ModelId = 30,
                            Price = 420m,
                            Rating = 9.0,
                            Url = "https://www.araba.com/_next/image?url=https%3A%2F%2Fres.cloudinary.com%2Ftasit-com%2Fimages%2Ff_webp%2Cq_auto%2Fv1680626856%2Ftesla-model-y-inceleme%2Ftesla-model-y-inceleme.webp%3F_i%3DAA&w=3840&q=75"
                        },
                        new
                        {
                            Id = 40,
                            BrandId = 17,
                            InsuranceCost = 90m,
                            IsAvailable = false,
                            ModelId = 31,
                            Price = 400m,
                            Rating = 8.0,
                            Url = "https://th.bing.com/th/id/OIP.9wxNUwTthrUuNobKtAoYBwHaE8?rs=1&pid=ImgDetMain"
                        },
                        new
                        {
                            Id = 41,
                            BrandId = 17,
                            InsuranceCost = 80m,
                            IsAvailable = true,
                            ModelId = 32,
                            Price = 360m,
                            Rating = 8.0,
                            Url = "https://th.bing.com/th/id/R.2d5499fe5b284df9fe23f4b27dd77d60?rik=fmI6NjfcynQWxw&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            Id = 42,
                            BrandId = 18,
                            InsuranceCost = 200m,
                            IsAvailable = true,
                            ModelId = 33,
                            Price = 800m,
                            Rating = 10.0,
                            Url = "https://th.bing.com/th/id/R.b5dc5efe3fffa7cf666c4f0d7fdd2718?rik=Go0eJvJqeAwKJQ&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            Id = 43,
                            BrandId = 18,
                            InsuranceCost = 150m,
                            IsAvailable = true,
                            ModelId = 34,
                            Price = 700m,
                            Rating = 9.0,
                            Url = "https://th.bing.com/th/id/R.fa478ebff8509097b44979ad41cbd771?rik=Ajz8Q5PQa36V5g&pid=ImgRaw&r=0"
                        });
                });

            modelBuilder.Entity("Car_Reservation_Domain.Entities.CarEntity.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Models", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            Category = "Economic",
                            Name = "Corolla"
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            Category = "SUV",
                            Name = "Prius"
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 1,
                            Category = "Luxury",
                            Name = "Camry"
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 1,
                            Category = "Pickup",
                            Name = "Land Cruiser"
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 1,
                            Category = "Economic",
                            Name = "RAV4"
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 2,
                            Category = "Sports",
                            Name = "Mustang"
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 2,
                            Category = "Pickup",
                            Name = "F-150"
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 2,
                            Category = "Economic",
                            Name = "Focus"
                        },
                        new
                        {
                            Id = 9,
                            BrandId = 3,
                            Category = "Luxury",
                            Name = "3 Series"
                        },
                        new
                        {
                            Id = 10,
                            BrandId = 3,
                            Category = "SUV",
                            Name = "X5"
                        },
                        new
                        {
                            Id = 11,
                            BrandId = 4,
                            Category = "Luxury",
                            Name = "C-Class"
                        },
                        new
                        {
                            Id = 12,
                            BrandId = 4,
                            Category = "SUV",
                            Name = "GLE"
                        },
                        new
                        {
                            Id = 13,
                            BrandId = 5,
                            Category = "Economic",
                            Name = "Civic"
                        },
                        new
                        {
                            Id = 14,
                            BrandId = 5,
                            Category = "SUV",
                            Name = "CR-V"
                        },
                        new
                        {
                            Id = 15,
                            BrandId = 6,
                            Category = "Sports",
                            Name = "Camaro"
                        },
                        new
                        {
                            Id = 16,
                            BrandId = 6,
                            Category = "Pickup",
                            Name = "Silverado"
                        },
                        new
                        {
                            Id = 17,
                            BrandId = 7,
                            Category = "Medium",
                            Name = "Altima"
                        },
                        new
                        {
                            Id = 18,
                            BrandId = 7,
                            Category = "SUV",
                            Name = "Rogue"
                        },
                        new
                        {
                            Id = 19,
                            BrandId = 9,
                            Category = "Economic",
                            Name = "Forte"
                        },
                        new
                        {
                            Id = 20,
                            BrandId = 9,
                            Category = "SUV",
                            Name = "Sorento"
                        },
                        new
                        {
                            Id = 21,
                            BrandId = 10,
                            Category = "Hatchback",
                            Name = "Golf"
                        },
                        new
                        {
                            Id = 22,
                            BrandId = 10,
                            Category = "SUV",
                            Name = "Tiguan"
                        },
                        new
                        {
                            Id = 23,
                            BrandId = 12,
                            Category = "Economic",
                            Name = "Mazda3"
                        },
                        new
                        {
                            Id = 24,
                            BrandId = 12,
                            Category = "SUV",
                            Name = "CX-5"
                        },
                        new
                        {
                            Id = 25,
                            BrandId = 14,
                            Category = "Sports",
                            Name = "Charger"
                        },
                        new
                        {
                            Id = 26,
                            BrandId = 14,
                            Category = "SUV",
                            Name = "Durango"
                        },
                        new
                        {
                            Id = 27,
                            BrandId = 15,
                            Category = "SUV",
                            Name = "Wrangler"
                        },
                        new
                        {
                            Id = 28,
                            BrandId = 15,
                            Category = "SUV",
                            Name = "Grand Cherokee"
                        },
                        new
                        {
                            Id = 29,
                            BrandId = 16,
                            Category = "Electric",
                            Name = "Model 3"
                        },
                        new
                        {
                            Id = 30,
                            BrandId = 16,
                            Category = "Electric",
                            Name = "Model Y"
                        },
                        new
                        {
                            Id = 31,
                            BrandId = 17,
                            Category = "SUV",
                            Name = "XC60"
                        },
                        new
                        {
                            Id = 32,
                            BrandId = 17,
                            Category = "Luxury",
                            Name = "S60"
                        },
                        new
                        {
                            Id = 33,
                            BrandId = 18,
                            Category = "Sports",
                            Name = "911"
                        },
                        new
                        {
                            Id = 34,
                            BrandId = 18,
                            Category = "SUV",
                            Name = "Cayenne"
                        });
                });

            modelBuilder.Entity("Car_Reservation_Domain.Entities.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PicUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Car_Reservation_Domain.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestedBrand")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("RequestedModel")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Requests", (string)null);
                });

            modelBuilder.Entity("Car_Reservation_Domain.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations", (string)null);
                });

            modelBuilder.Entity("Car_Reservation_Domain.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RequestUser", b =>
                {
                    b.Property<int>("RequestsId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RequestsId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("RequestUser", (string)null);
                });

            modelBuilder.Entity("Car_Reservation_Domain.Entities.CarEntity.Car", b =>
                {
                    b.HasOne("Car_Reservation_Domain.Entities.Identity.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId");

                    b.HasOne("Car_Reservation_Domain.Entities.CarEntity.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Car_Reservation_Domain.Entities.CarEntity.Model", "Model")
                        .WithMany("Cars")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Brand");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Car_Reservation_Domain.Entities.CarEntity.Model", b =>
                {
                    b.HasOne("Car_Reservation_Domain.Entities.CarEntity.Brand", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Car_Reservation_Domain.Entities.Identity.User", b =>
                {
                    b.OwnsOne("Car_Reservation_Domain.Entities.Identity.UserAddress", "Address", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId");

                            b1.ToTable("AspNetUsers", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("Car_Reservation_Domain.Entities.Reservation", b =>
                {
                    b.HasOne("Car_Reservation_Domain.Entities.CarEntity.Car", "Car")
                        .WithMany("Reservations")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Car_Reservation_Domain.Entities.Identity.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Car_Reservation_Domain.Entities.Review", b =>
                {
                    b.HasOne("Car_Reservation_Domain.Entities.CarEntity.Car", "Car")
                        .WithMany("Reviews")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Car_Reservation_Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Car_Reservation_Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Car_Reservation_Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Car_Reservation_Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Car_Reservation_Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RequestUser", b =>
                {
                    b.HasOne("Car_Reservation_Domain.Entities.Request", null)
                        .WithMany()
                        .HasForeignKey("RequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Car_Reservation_Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Car_Reservation_Domain.Entities.CarEntity.Brand", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("Car_Reservation_Domain.Entities.CarEntity.Car", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Car_Reservation_Domain.Entities.CarEntity.Model", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Car_Reservation_Domain.Entities.Identity.User", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
